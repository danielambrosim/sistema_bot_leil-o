import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';

import { HandlersCadastro } from './handlers/cadastro';
import { HandlersLogin, loginSessions } from './handlers/login';
import { HandlersAdicionais } from './handlers/adicionais';

dotenv.config();
const token = process.env.TELEGRAM_TOKEN;
if (!token) throw new Error('TELEGRAM_TOKEN n√£o definido no .env');

export const bot = new TelegramBot(token, { polling: true });
export const userSessions = new Map<number, any>();
export const loggedInUsers = new Map<number, number>();

export const mainMenu = {
  reply_markup: {
    keyboard: [
      [{ text: 'üìù Cadastro' }, { text: 'üîë Login' }],
      [{ text: 'üìã Editais' }, { text: 'üîç Buscar Edital' }],
      [{ text: '‚ÑπÔ∏è Ajuda' }, { text: 'üö™ Logout' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// ALIAS dos comandos para compara√ß√£o flex√≠vel (sem barra, tudo em min√∫sculo)
const ALIAS_COMANDOS: { [key: string]: string } = {
  'cadastro': 'üìù Cadastro',
  'üìù Cadastro': 'üìù Cadastro',
  'Cadastro': 'üìù Cadastro',
  'login': 'üîë Login',
  'üîë Login': 'üîë Login',
  'Login': 'üîë Login',
  'editais': 'üìã Editais',
  'üìã Editais': 'üìã Editais',
  'Editais': 'üìã Editais',
  'buscar edital': 'üîç Buscar Edital',
  'üîç Buscar Edital': 'üîç Buscar Edital',
  'Buscar Edital': 'üîç Buscar Edital',
  'ajuda': '‚ÑπÔ∏è Ajuda',
  '‚ÑπÔ∏è Ajuda': '‚ÑπÔ∏è Ajuda',
  'Ajuda': '‚ÑπÔ∏è Ajuda',
  'logout': 'üö™ Logout',
  'sair': 'üö™ Logout',
  'Logout': 'üö™ Logout',
  'üö™ Logout': 'üö™ Logout'
};

// Objeto de handlers (ajuste para incluir handlers reais dos fluxos)
const COMANDOS_MENU: { [key: string]: (chatId: number) => Promise<any> } = {
'üìù Cadastro': HandlersCadastro.iniciar,
'üîë Login': HandlersLogin.iniciar,
'üìã Editais': async (chatId) => { await HandlersAdicionais.listarSitesParaBusca(chatId); },
'üîç Buscar Edital': async (chatId) => { await HandlersAdicionais.listarSitesParaBusca(chatId); },
'‚ÑπÔ∏è Ajuda': async (chatId) => {
  await bot.sendMessage(chatId, '‚ÑπÔ∏è Este bot permite cadastro, login e acesso a editais de leil√µes!', mainMenu);
},
  'üö™ Logout': async (chatId) => {
    if (loggedInUsers.has(chatId)) {
      loggedInUsers.delete(chatId);
      await bot.sendMessage(chatId, '‚úÖ Voc√™ foi deslogado.', mainMenu);
    } else {
      await bot.sendMessage(chatId, '‚ÑπÔ∏è Voc√™ n√£o estava logado.', mainMenu);
    }
  } 
};

// Handler de mensagens principal

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  console.log('Texto recebido:', JSON.stringify(text));

  // 1. Ignora comandos iniciados por barra (ex: /start, /login)
  if (text && text.startsWith('/')) return;

  // 2. Processa documentos/fotos durante cadastro
  if (!text && msg.photo && userSessions.has(chatId)) {
    const user = userSessions.get(chatId)!;
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    await HandlersCadastro.processarDocumento(chatId, user, fileId);
    return;
  }

  // 3. Processa comandos do menu principal (clicou no bot√£o!)
  if (text) {
   
    const comandoChave = ALIAS_COMANDOS[text ?? ''] || text;
    const handler = COMANDOS_MENU[comandoChave as keyof typeof COMANDOS_MENU];

    if (handler) {
      await handler(chatId);
      return;
    }
  }

  // 4. Processa login em andamento
  if (loginSessions.has(chatId)) {
    await HandlersLogin.processarEtapa(msg, loginSessions.get(chatId)!);
    return;
  }

  // 5. Processa cadastro em andamento
  if (userSessions.has(chatId)) {
    await HandlersCadastro.processarEtapa(msg, userSessions.get(chatId)!);
    return;
  }

  // 6. Sauda√ß√µes e primeira mensagem: sempre mostra o menu
  if (/^(oi|ol√°|ola|start|iniciar)$/i.test(text || '')) {
    await bot.sendMessage(chatId, 'ü§ñ Bem-vindo ao Bot de Leil√µes!\nEscolha uma op√ß√£o:', mainMenu);
    return;
  }

  // 7. Mensagem n√£o reconhecida: volta ao menu
  await bot.sendMessage(chatId, 'Escolha uma op√ß√£o:', mainMenu);
});

// Handler para o /start ‚Äî s√≥ para garantir, mas j√° n√£o √© mais necess√°rio
bot.onText(/\/start/, async (msg) => {
  await bot.sendMessage(msg.chat.id, 'ü§ñ Bem-vindo ao Bot de Leil√µes!\nEscolha uma op√ß√£o:', mainMenu);
});

// Handler para /ajuda ‚Äî opcional
bot.onText(/\/ajuda/, (msg) => {
  bot.sendMessage(msg.chat.id, '‚ÑπÔ∏è Este bot permite cadastro, login e acesso a editais de leil√µes!', mainMenu);
});

// Erro global
process.on('unhandledRejection', (error) => {
  console.error('Erro n√£o tratado:', error);
});
process.on('uncaughtException', (error) => {
  console.error('Exce√ß√£o n√£o capturada:', error);
});

// Inicia o bot
console.log('ü§ñ Bot iniciado!');
